openapi: 3.0.0
info:
  title: AI-Powered Expense Tracker API
  description: |
    A Django REST API with AI-powered expense categorization and insights generation.
    
    ## Features
    - User authentication with JWT tokens
    - CRUD operations for expenses
    - AI-powered expense categorization
    - Spending insights and anomaly detection
    
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8000/api
    description: Development server

paths:
  /auth/register/:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Create a new user account with email and password authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, username, password, password_confirm]
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  minLength: 8
                  example: "securepass123"
                password_confirm:
                  type: string
                  example: "securepass123"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  access:
                    type: string
                    description: JWT access token
                  refresh:
                    type: string
                    description: JWT refresh token
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                password_mismatch:
                  summary: Password confirmation mismatch
                  value:
                    non_field_errors: ["Passwords don't match"]
                duplicate_email:
                  summary: Email already exists
                  value:
                    email: ["User with this email already exists."]

  /auth/login/:
    post:
      tags: [Authentication]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  access:
                    type: string
                  refresh:
                    type: string

  /expenses/:
    get:
      tags: [Expenses]
      summary: List user expenses
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of expenses
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Expense'

    post:
      tags: [Expenses]
      summary: Create new expense
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseCreate'
      responses:
        '201':
          description: Expense created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'

  /ai/categorize/:
    post:
      tags: [AI Features]
      summary: Categorize expense description using AI
      description: |
        Uses AI to predict the most appropriate category for an expense based on its description.
        
        **AI Methods:**
        - `rule_based`: Keyword matching algorithm
        - `ml_model`: Machine learning classifier (future)
        - `fallback`: Default when no match found
        
        **Categories:**
        - food, transport, shopping, entertainment, bills, healthcare, education, travel, other
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description]
              properties:
                description:
                  type: string
                  minLength: 1
                  maxLength: 255
                  example: "Waakye at chop bar"
                  description: "Expense description to categorize"
      responses:
        '200':
          description: AI categorization result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AICategorizationResult'
              examples:
                food_category:
                  summary: Food expense categorization
                  value:
                    predicted_category: "food"
                    confidence: 0.85
                    method: "rule_based"
                    matched_keyword: "waakye"
                transport_category:
                  summary: Transport expense categorization
                  value:
                    predicted_category: "transport"
                    confidence: 0.85
                    method: "rule_based"
                    matched_keyword: "trotro"
                fallback_category:
                  summary: Unknown expense fallback
                  value:
                    predicted_category: "other"
                    confidence: 0.3
                    method: "fallback"
                    matched_keyword: null
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Description is required"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /ai/auto-categorize/:
    post:
      tags: [AI Features]
      summary: Auto-categorize existing expense with AI
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [expense_id]
              properties:
                expense_id:
                  type: integer
                  example: 123
      responses:
        '200':
          description: Expense auto-categorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  expense_id:
                    type: integer
                  ai_predicted_category:
                    type: string
                  current_category:
                    type: string
                  confidence:
                    type: number
                  method:
                    type: string

  /ai/override-category/:
    post:
      tags: [AI Features]
      summary: Manually override AI category prediction
      description: Allows users to override AI predictions while preserving the original AI suggestion
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [expense_id, category]
              properties:
                expense_id:
                  type: integer
                  example: 123
                category:
                  type: string
                  enum: [food, transport, shopping, entertainment, bills, healthcare, education, travel, other]
                  example: "entertainment"
      responses:
        '200':
          description: Category override applied
          content:
            application/json:
              schema:
                type: object
                properties:
                  expense_id:
                    type: integer
                  old_category:
                    type: string
                  new_category:
                    type: string
                  ai_predicted_category:
                    type: string
                  override_applied:
                    type: boolean

  /ai/categories/:
    get:
      tags: [AI Features]
      summary: Get supported AI categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of supported categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  supported_categories:
                    type: array
                    items:
                      type: string
                  total_count:
                    type: integer

  /ai/insights/:
    get:
      tags: [AI Features]
      summary: Get AI-powered spending insights and analytics
      description: |
        Provides comprehensive spending analysis including:
        
        **Monthly Summary:**
        - Total spending amount and expense count
        - Average expense amount
        - Breakdown by category
        
        **Top Categories:**
        - Categories ranked by spending amount
        - Limited to top 5 categories
        
        **AI Anomaly Detection:**
        - Statistical analysis using z-score (2-sigma rule)
        - Identifies expenses significantly above historical average
        - Requires minimum 3 expenses for analysis
        
        **Spending Trends:**
        - Week-over-week spending analysis
        - Configurable time periods
      security:
        - bearerAuth: []
      parameters:
        - name: year
          in: query
          description: Specific year for monthly summary (defaults to current)
          schema:
            type: integer
            minimum: 2020
            maximum: 2030
            example: 2024
        - name: month
          in: query
          description: Specific month for monthly summary (defaults to current)
          schema:
            type: integer
            minimum: 1
            maximum: 12
            example: 3
      responses:
        '200':
          description: Comprehensive spending insights
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendingInsights'
              example:
                monthly_summary:
                  total_amount: 2850.00
                  total_expenses: 45
                  average_expense: 63.33
                  by_category:
                    - category: "food"
                      total: 1025.50
                      count: 18
                    - category: "transport"
                      total: 730.00
                      count: 12
                top_categories:
                  - category: "food"
                    total: 450.25
                    count: 18
                  - category: "transport"
                    total: 320.50
                    count: 12
                anomalies:
                  - id: 123
                    description: "Expensive dinner at Kempinski Hotel"
                    amount: 580.00
                    date: "2024-01-15"
                spending_trends:
                  - week: "Week 1"
                    total: 650.00
                    start_date: "2024-01-08"
                    end_date: "2024-01-15"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token obtained from login or registration"

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: "Authentication credentials were not provided."
    
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: "Not found."

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        detail:
          type: string
          description: Detailed error information
      example:
        error: "Invalid input provided"
    
    ValidationError:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
      example:
        email: ["This field is required."]
        password: ["This password is too short."]
    
    AICategorizationResult:
      type: object
      required: [predicted_category, confidence, method]
      properties:
        predicted_category:
          type: string
          enum: [food, transport, shopping, entertainment, bills, healthcare, education, travel, other]
          description: "AI-predicted expense category"
        confidence:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: "Confidence score (0.0 to 1.0)"
        method:
          type: string
          enum: [rule_based, ml_model, fallback]
          description: "AI method used for prediction"
        matched_keyword:
          type: string
          nullable: true
          description: "Keyword that triggered the categorization (if any)"
    
    SpendingInsights:
      type: object
      required: [monthly_summary, top_categories, anomalies, spending_trends]
      properties:
        monthly_summary:
          $ref: '#/components/schemas/MonthlySummary'
        top_categories:
          type: array
          items:
            $ref: '#/components/schemas/CategorySummary'
          description: "Top 5 categories by spending amount"
        anomalies:
          type: array
          items:
            $ref: '#/components/schemas/AnomalyExpense'
          description: "Expenses detected as statistical anomalies"
        spending_trends:
          type: array
          items:
            $ref: '#/components/schemas/WeeklyTrend'
          description: "Week-over-week spending trends"
    
    MonthlySummary:
      type: object
      properties:
        total_amount:
          type: number
          format: decimal
          description: "Total spending amount for the month"
        total_expenses:
          type: integer
          description: "Number of expenses in the month"
        average_expense:
          type: number
          format: decimal
          description: "Average expense amount"
        by_category:
          type: array
          items:
            $ref: '#/components/schemas/CategorySummary'
    
    CategorySummary:
      type: object
      properties:
        category:
          type: string
          enum: [food, transport, shopping, entertainment, bills, healthcare, education, travel, other]
        total:
          type: number
          format: decimal
          description: "Total amount spent in this category"
        count:
          type: integer
          description: "Number of expenses in this category"
    
    AnomalyExpense:
      type: object
      properties:
        id:
          type: integer
          description: "Expense ID"
        description:
          type: string
          description: "Expense description"
        amount:
          type: number
          format: decimal
          description: "Expense amount (flagged as anomaly)"
        date:
          type: string
          format: date
          description: "Expense date"
    
    WeeklyTrend:
      type: object
      properties:
        week:
          type: string
          description: "Week identifier (e.g., 'Week 1')"
        total:
          type: number
          format: decimal
          description: "Total spending for the week"
        start_date:
          type: string
          format: date
          description: "Week start date"
        end_date:
          type: string
          format: date
          description: "Week end date"

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        username:
          type: string
        date_joined:
          type: string
          format: date-time

    Expense:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: string
          format: decimal
        description:
          type: string
        category:
          type: string
          enum: [food, transport, shopping, entertainment, bills, healthcare, education, travel, other]
        ai_predicted_category:
          type: string
          nullable: true
        date:
          type: string
          format: date
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ExpenseCreate:
      type: object
      required: [amount, description, category, date]
      properties:
        amount:
          type: string
          format: decimal
          description: "Amount in Ghana Cedis (GHS)"
        description: "Amount in Ghana Cedis (GHS)"
        description:
          type: string
        category:
          type: string
          enum: [food, transport, shopping, entertainment, bills, healthcare, education, travel, other]
        date:
          type: string
          format: date